#!/usr/bin/env python3
import os


class Color:
    def __init__(self, r: int, g: int, b: int, a: int = 255):
        self.r, self.g, self.b, self.a = r, g, b, a

    @classmethod
    def from_hex(cls, hex_code: str):
        hex_code = hex_code.lstrip("#")

        if len(hex_code) in [3, 4]:
            hex_code = "".join([c*2 for c in hex_code])

        def part(n: int):
            start = n * 2
            end = (n + 1) * 2

            if len(hex_code) >= end:
                return int(hex_code[start:end], 16)

            return 255

        r, g, b, a = [
            part(i)
            for i in range(4)
        ]
        print(hex_code, r, g, b)

        return cls(r, g, b, a)

    def to_hex(self, stripped=False, alpha=True):
        s = "" if stripped else "#"
        s += "{:02x}".format(self.r)
        s += "{:02x}".format(self.g)
        s += "{:02x}".format(self.b)

        if self.a != 255 and alpha:
            s += "{:02x}".format(self.a)

        return s

    def to_rgb(self, alpha=True, sep=", "):
        lst = [self.r, self.g, self.b]

        if alpha and self.a != 255:
            lst.append(self.a)

        return sep.join(list(map(str, lst)))


def hexc(code):
    return Color.from_hex(code)


class Colorscheme:
    def_colors = dict(
        background=Color(0, 0, 0),
        foreground=Color(255, 255, 255),
        primary=Color(0, 255, 0),
        secondary=Color(0, 255, 255),
        error=Color(255, 0, 0)
    )

    def __init__(
        self,
        # for example [<custom colors>, <colors to default to>]
        *mix: dict[str, Color]
    ):
        def get_color(key: str) -> Color:
            for colors in mix:
                if key in colors:
                    return colors[key]

            return Colorscheme.def_colors[key]

        self.colors = {
            key: get_color(key)
            for key in Colorscheme.def_colors.keys()
        }


def template_ags(scheme: Colorscheme, path: str):
    path = os.path.expanduser(path)

    def fm(c: Color):
        return c.to_hex()

    vars = {
        name: fm(color)
        for name, color in scheme.colors.items()
    }
    # vars["image"] = "\"/home/gyk/Pictures/wallpapers/sin_cos_2.png\""

    with open(path, "w") as f:
        s = "\n".join([
            f"$color_{key}: {val};"
            for key, val in vars.items()
        ])
        f.write(s)


def template_waybar(scheme: Colorscheme, path: str):
    path = os.path.expanduser(path)

    def fm(c: Color):
        return c.to_hex()

    vars = {
        name: fm(color)
        for name, color in scheme.colors.items()
    }

    with open(path, "w") as f:
        s = "\n".join([
            f"@define-color {key} {val};"
            for key, val in vars.items()
        ])
        f.write(s)


def template_hypr(scheme: Colorscheme, path: str):
    path = os.path.expanduser(path)

    def fm(c: Color):
        if c.a != 255:
            # print("yay")
            return f"rgba({c.to_hex(stripped=True, alpha=True)})"

        return f"rgb({c.to_hex(stripped=True, alpha=False)})"

    vars = {
        key: fm(val)
        for key, val in scheme.colors.items()
    }

    with open(path, "w") as f:
        s = "\n".join([
            f"$color_{key} = {val}"
            for key, val in vars.items()
        ])
        f.write(s)


def accent_scheme(primary: Color, secondary: Color):
    return Colorscheme(dict(
        primary=primary,
        secondary=secondary,
        foreground=Color(255, 255, 255),
        # foreground=primary,
        background=hexc("181818"),
        error=Color(255, 0, 0)
    ))


# scheme = accent_scheme(
#     Color.from_hex("#0046AA"),
#     # Color(0, 0, 255),
#     Color(0, 255, 0),
# )

# custom (blue + dark-gray)
scheme = Colorscheme(dict(
    background=hexc("181818"),
    # background=hexc("00ffff"),
    foreground=hexc("fbfef9"),

    primary=hexc("2374ab"),  # k√©k
    # primary=hexc("00ff00"),

    secondary=hexc("32a284"),
    # secondary=hexc("ff0000"),
    error=hexc("fb3640"),
))

# # Encsi
# scheme = Colorscheme(dict(
#     background=hexc("492971"),
#     foreground=hexc("f6d8ae"),
#     primary=hexc("9d306b"),
#     secondary=hexc("32a284"),
#     error=hexc("fb3640"),
# ))

# # end 4
# scheme = Colorscheme(dict(
#     background=hexc("17111b"),
#     primary=hexc("e2b6ff"),
#     foreground=hexc("ebdfed"),
#     secondary=hexc("ffb4a9"),
# ))

# # catppuccin latte
# scheme = Colorscheme(dict(
#     background=hexc("eff1f5"),
#     # background=hexc("ffffff"),
#     foreground=hexc("4c4f69"),
#     primary=hexc("1e66f5"),
#     # primary=hexc("82d6f3"),
#     secondary=hexc("1e66f5"),
#     error=hexc("d20f39"),
# ))

# scheme = accent_scheme(
#     # primary=hexc("8800ff"),
#     # primary=hexc("00ff00"),
#     # primary=hexc("bb0000"),
#     primary=hexc("9d306b"),
#     secondary=hexc("00ff00")
# )

template_ags(scheme, "~/.config/ags/scss/colors/custom_gen.scss")
template_hypr(scheme, "~/.config/hypr/colors/custom_gen.conf")
template_waybar(scheme, "~/.config/waybar/colors/custom_gen.css")
