const { GLib, Gdk } = imports.gi;
import { VolumeIndicator } from "./indicator.js"
import { datetime } from "../variables.js"
import PopupWindow from "./popupwindow.js"

const hyprland = await Service.import("hyprland")

const trans_dur = 100

const desktop_widget_visible = Variable(true)

const DesktopWidget = () => Widget.Box({
    css: "min-width: 2px;",
    margin: 30,
    vertical: true,
    children: [
        Widget.Label({
            class_name: "desktop-clock",
            // label: time.bind(),
            label: datetime.bind().as(dt => dt.format("%H:%M"))
            // label: "3:14:15.926535"
        }),
        Widget.Label({
            class_name: "desktop-date",
            // label: "Nem kellene mÃ¡r...",
            label: datetime.bind().as(dt => dt.format("%Y %b %d %a"))
        }),
        Widget.Label({
            class_name: "desktop-date",
            label: "Aludni? (Esetleg)",
            // label: datetime.bind().as(dt => dt.format("w%V d%j"))
        }),
    ],
})

const DesktopWidgetRevealer = () => Widget.Revealer({
    reveal_child: false,
    transition: "slide_left",
    transition_duration: trans_dur,
    child: DesktopWidget(),

    // setup: self => self.poll(2000, () => {
    //     self.reveal_child = !self.reveal_child;
    // }),

    setup: self => self.hook(App, (_, name, visible) => {
        if (self.get_toplevel().name == name) {
            self.reveal_child = visible
            // if (visible) rev.reveal_child = visible
            // else Utils.timeout(100, () => rev.reveal_child = visible)
    }}, "window-toggled")

    // setup: self => self.hook(desktop_widget_visible, {
    // })

})
//     .hook(App, (rev, name, visible) => {
//     if (rev.get_toplevel().name == name) {
//         rev.reveal_child = visible
//         // if (visible) rev.reveal_child = visible
//         // else Utils.timeout(100, () => rev.reveal_child = visible)
//     }
// })

// const DesktopWidgetWindow = () => Widget.Window({
//     name: "desktop_widget",
//     class_name: "desktop-widget",
//     layer: "overlay",
//     visible: true,
//     // exclusivity: "ignore",
//     anchor: ["right", "top", "bottom"],
//     margins: [120, 0, 120],
//
//     // child: Widget.Box({
//     //     children: [
//     //         Widget.Box({css: "min-width: 1px;"}),
//     //         DesktopWidgetRevealer(),
//     //     ]
//     // })
//
//     child: DesktopWidget()
// })

const DesktopWidgetWindow = () => PopupWindow({
    name: "desktop_widget",
    class_name: "desktop-widget",
    layer: "overlay",
    visible: false,
    anchor: ["right", "top", "bottom"],
    margins: [120, 0, 120],
    // child: DesktopWidgetRevealer()

    child: Widget.Box({
        children: [
            Widget.Box({css: "min-width: 1px;"}),
            DesktopWidgetRevealer(),
        ]
    })
})

// globalThis.toggle_desktop_widget = () => {
//     print("e")
//     const win = App.getWindow("desktop_widget")
//     const rev = win.child.children[1]
//     print(rev)
//
//     // rev.reveal_child = !rev.reveal_child
//     const rc = !rev.reveal_child
//     rev.reveal_child = rc
//
//     if (rc) {
//         App.openWindow(win.name)
//     }
//
//     else {
//         Utils.timeout(trans_dur, () => App.closeWindow(win.name))
//     }
//
//
//
//     // if (win.visible) {
//     //     win.child.reveal_child = false;
//     //     Utils.timeout(trans_dur, () => App.closeWindow(win.name))
//     // } else {
//     //     App.openWindow(win.name)
//     //     win.child.reveal_child = true;
//     // }
//
// }

// globalThis.toggle_desktop_widget = () => {
//     print("nice")
//     desktop_widget_visible = !desktop_widget_visible
// }

// .hook(hyprland, self => {
//     const ws = hyprland.getMonitor(self.monitor).activeWorkspace.id
//     // print(ws)
//     // const ws = hyprland.active.workspace.id
//     const wc = hyprland.getWorkspace(ws)?.windows || 0
//     const visible = (wc < 1)
//
//     if (!visible) {
//         self.child.reveal_child = false
//         Utils.timeout(trans_dur, () => {
//             if (!visible && self.visible) {
//                 App.closeWindow(self.name)
//             }
//         })
//         // print("closing")
//     } else {
//         if (!self.visible && visible) {
//             App.openWindow(self.name)
//         }
//         self.child.reveal_child = true
//         // print("opening")
//     }
// })

export default DesktopWidgetWindow

