import os
from lib import Theme, Color


def ags(theme: Theme, path: str):
    path = os.path.expanduser(path)

    def fm(c: Color):
        return c.to_hex()

    vars = {
        name: fm(color)
        for name, color in theme.colors.items()
    }
    # vars["image"] = "\"/home/gyk/Pictures/wallpapers/sin_cos_2.png\""

    with open(path, "w") as f:
        s = "\n".join([
            f"${key}: {val};"
            for key, val in vars.items()
        ])
        f.write(s)


# no longer used...
def waybar(scheme: Theme, path: str):
    path = os.path.expanduser(path)

    def fm(c: Color):
        return c.to_hex()

    vars = {
        name: fm(color)
        for name, color in scheme.colors.items()
    }

    with open(path, "w") as f:
        s = "\n".join([
            f"@define-color {key} {val};"
            for key, val in vars.items()
        ])
        f.write(s)


def hypr(scheme: Theme, path: str):
    path = os.path.expanduser(path)

    colors = list(scheme.colors.items())

    bg = scheme.colors["background"]
    colors.append((
        "border",
        Color(*(
            min(255, s*4)
            for s in bg.get_values()
        ))
    ))

    txt = "\n".join([
        "# (Generated by my custom script)",
        "",
        *(
            f"$color_{n} = {c.to_hex(stripped=True)}"
            for n, c in colors
        )
    ])

    with open(path, "w") as f:
        f.write(txt)


def hyprpaper(wallpaper: str, path: str):
    path = os.path.expanduser(path)

    lines = [
        f"$file = {wallpaper}",
        "preload = $file",
        "wallpaper = , $file"
    ]

    with open(path, "w") as f:
        txt = "\n".join(lines)
        f.writelines(txt)
